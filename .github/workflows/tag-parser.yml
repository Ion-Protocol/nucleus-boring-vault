name: Tag Parser

on:
  # Temporary: Allow manual triggering for testing
  workflow_dispatch:
  push:
    branches:
      - carson/decoders
    paths:
      - 'src/base/DecodersAndSanitizers/**/*.sol'  # Only run when Solidity files in this directory change

jobs:
  parse-tags:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history to detect file changes
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Install dependencies
        run: npm install pocketbase keccak256
      
      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly
      
      - name: Get changed files
        id: changed-files
        run: |
          # Get list of changed .sol files in the DecodersAndSanitizers directory
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep "src/base/DecodersAndSanitizers.*\.sol$" || echo "")
          echo "Changed files: $CHANGED_FILES"
          echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT
      
      - name: Run tag parser
        if: steps.changed-files.outputs.files != ''
        env:
          POCKETBASE_URL: ${{ secrets.POCKETBASE_URL }}
        run: |
          # Create the script to process files and their dependencies
          cat > process_inherited_files.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const { execSync } = require('child_process');

          // Get the list of changed files from the command line arguments
          const changedFiles = process.argv.slice(2);

          // Function to find all files that import a specific file
          function findImportingFiles(targetFile) {
              const importingFiles = [];
              const baseDir = 'src';
              
              // Get all .sol files in the src directory
              const allFiles = execSync(`find ${baseDir} -name "*.sol"`, { encoding: 'utf8' })
                  .trim()
                  .split('\n');
              
              // Check each file for imports of the target file
              for (const file of allFiles) {
                  const content = fs.readFileSync(file, 'utf8');
                  const relativePath = path.relative(path.dirname(file), targetFile);
                  const targetName = path.basename(targetFile, '.sol');
                  
                  // Check if the file imports the target file
                  if (content.includes(`import { ${targetName}`) || 
                      content.includes(`import "${targetFile}"`) || 
                      content.includes(`import "${relativePath}"`)) {
                      importingFiles.push(file);
                  }
              }
              
              return importingFiles;
          }

          // Process all changed files and their importing files
          const filesToProcess = new Set();

          for (const file of changedFiles) {
              if (file.trim() && file.endsWith('.sol')) {
                  filesToProcess.add(file);
                  
                  // Find files that import this file
                  const importingFiles = findImportingFiles(file);
                  for (const importingFile of importingFiles) {
                      filesToProcess.add(importingFile);
                  }
              }
          }

          // Process each file with the tag parser
          for (const file of filesToProcess) {
              console.log(`Processing ${file}`);
              try {
                  execSync(`node tag_parse.js ${file} --post`, { stdio: 'inherit' });
              } catch (error) {
                  console.error(`Error processing ${file}: ${error.message}`);
              }
          }
          EOF
          
          # Run the script with the changed files
          node process_inherited_files.js ${{ steps.changed-files.outputs.files }} 